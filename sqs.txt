	// Create an SQS client
	sqsClient := sqs.NewFromConfig(cfg)

	// Create a new SQS queue
	createQueueOutput, err := sqsClient.CreateQueue(context.TODO(), &sqs.CreateQueueInput{
		QueueName: aws.String("MyWittyQueue"),
	})
	if err != nil {
		log.Fatalf("unable to create SQS queue, %v", err)
	}

	// Get the URL of the created queue
	queueURL := *createQueueOutput.QueueUrl
	fmt.Printf("Queue created, URL: %s\n", queueURL)

	myMessage := MyMessage{
		Name:    "Ian Mwangi Muniyiri",
		Message: "Hello, there!",
	}

	jsonPayload, err := json.Marshal(myMessage)
	if err != nil {
		log.Fatalf("unable to marshal myMessage: %v", err)
	}

	// send batches of messages using aws sdk for golang
	messages := []types.SendMessageBatchRequestEntry{
		{
			Id:          aws.String("message1"),
			MessageBody: aws.String(string(jsonPayload)),
		},
		{
			Id:          aws.String("message2"),
			MessageBody: aws.String("hello there"),
		},
		{
			Id:          aws.String("message3"),
			MessageBody: aws.String("hello jenna"),
		},
		{
			Id:          aws.String("message4"),
			MessageBody: aws.String("hello witty"),
			MessageAttributes: map[string]types.MessageAttributeValue{
				"AttributeKey": {
					DataType:    aws.String("String"),         // Set the type of the attribute
					StringValue: aws.String("AttributeValue"), // Set the value of the attribute
				},
			},
		},
	}

	// Send a message to the queue
	// sendMessageOutput, err := sqsClient.SendMessage(context.TODO(), &sqs.SendMessageInput{
	// 	QueueUrl:    &queueURL,
	// 	MessageBody: aws.String(string(jsonPayload)),
	// 	MessageAttributes: map[string]types.MessageAttributeValue{
	// 		"AttributeKey": {
	// 			DataType:    aws.String("String"),         // Set the type of the attribute
	// 			StringValue: aws.String("AttributeValue"), // Set the value of the attribute
	// 		},
	// 	},
	// })

	sendMessageBatchInput := &sqs.SendMessageBatchInput{
		QueueUrl: &queueURL,
		Entries:  messages,
	}

	response, err := sqsClient.SendMessageBatch(context.TODO(), sendMessageBatchInput)
	if err != nil {
		log.Fatalf("failed to send messages: %v", err)
	}

	if len(response.Failed) > 0 {
		fmt.Printf("Failed to send %d messages:\n", len(response.Failed))

		for _, failed := range response.Failed {
			fmt.Printf("Message ID: %s, Error: %s\n", *failed.Id, *failed.Message)

		}

	}
	fmt.Printf("Sent %d messages successfully.\n", len(response.Successful))

